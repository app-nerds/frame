/* Copyright Â© 2023 App Nerds LLC v1.4.2 */
/** @typedef {object & { position: AlertPosition, duration: number, closable: boolean, focusable: boolean }} AlertOptions */
/**
 * Constants for alert position.
 * @enum {AlertPosition}
 */
const AlertPosition={TopLeft:"top-left",TopCenter:"top-center",TopRight:"top-right",BottomLeft:"bottom-left",BottomCenter:"bottom-center",BottomRight:"bottom-right"},alertPositionIndex=[[AlertPosition.TopLeft,AlertPosition.TopCenter,AlertPosition.TopRight],[AlertPosition.BottomLeft,AlertPosition.BottomCenter,AlertPosition.BottomRight]],svgs={success:'<svg viewBox="0 0 426.667 426.667" width="18" height="18"><path d="M213.333 0C95.518 0 0 95.514 0 213.333s95.518 213.333 213.333 213.333c117.828 0 213.333-95.514 213.333-213.333S331.157 0 213.333 0zm-39.134 322.918l-93.935-93.931 31.309-31.309 62.626 62.622 140.894-140.898 31.309 31.309-172.203 172.207z" fill="#6ac259"></path></svg>',warn:'<svg viewBox="0 0 310.285 310.285" width=18 height=18> <path d="M264.845 45.441C235.542 16.139 196.583 0 155.142 0 113.702 0 74.743 16.139 45.44 45.441 16.138 74.743 0 113.703 0 155.144c0 41.439 16.138 80.399 45.44 109.701 29.303 29.303 68.262 45.44 109.702 45.44s80.399-16.138 109.702-45.44c29.303-29.302 45.44-68.262 45.44-109.701.001-41.441-16.137-80.401-45.439-109.703zm-132.673 3.895a12.587 12.587 0 0 1 9.119-3.873h28.04c3.482 0 6.72 1.403 9.114 3.888 2.395 2.485 3.643 5.804 3.514 9.284l-4.634 104.895c-.263 7.102-6.26 12.933-13.368 12.933H146.33c-7.112 0-13.099-5.839-13.345-12.945L128.64 58.594c-.121-3.48 1.133-6.773 3.532-9.258zm23.306 219.444c-16.266 0-28.532-12.844-28.532-29.876 0-17.223 12.122-30.211 28.196-30.211 16.602 0 28.196 12.423 28.196 30.211.001 17.591-11.456 29.876-27.86 29.876z" fill="#FFDA44" /> </svg>',info:'<svg viewBox="0 0 23.625 23.625" width=18 height=18> <path d="M11.812 0C5.289 0 0 5.289 0 11.812s5.289 11.813 11.812 11.813 11.813-5.29 11.813-11.813S18.335 0 11.812 0zm2.459 18.307c-.608.24-1.092.422-1.455.548a3.838 3.838 0 0 1-1.262.189c-.736 0-1.309-.18-1.717-.539s-.611-.814-.611-1.367c0-.215.015-.435.045-.659a8.23 8.23 0 0 1 .147-.759l.761-2.688c.067-.258.125-.503.171-.731.046-.23.068-.441.068-.633 0-.342-.071-.582-.212-.717-.143-.135-.412-.201-.813-.201-.196 0-.398.029-.605.09-.205.063-.383.12-.529.176l.201-.828c.498-.203.975-.377 1.43-.521a4.225 4.225 0 0 1 1.29-.218c.731 0 1.295.178 1.692.53.395.353.594.812.594 1.376 0 .117-.014.323-.041.617a4.129 4.129 0 0 1-.152.811l-.757 2.68a7.582 7.582 0 0 0-.167.736 3.892 3.892 0 0 0-.073.626c0 .356.079.599.239.728.158.129.435.194.827.194.185 0 .392-.033.626-.097.232-.064.4-.121.506-.17l-.203.827zm-.134-10.878a1.807 1.807 0 0 1-1.275.492c-.496 0-.924-.164-1.28-.492a1.57 1.57 0 0 1-.533-1.193c0-.465.18-.865.533-1.196a1.812 1.812 0 0 1 1.28-.497c.497 0 .923.165 1.275.497.353.331.53.731.53 1.196 0 .467-.177.865-.53 1.193z" fill="#006DF0" /> </svg>',error:'<svg viewBox="0 0 51.976 51.976" width=18 height=18> <path d="M44.373 7.603c-10.137-10.137-26.632-10.138-36.77 0-10.138 10.138-10.137 26.632 0 36.77s26.632 10.138 36.77 0c10.137-10.138 10.137-26.633 0-36.77zm-8.132 28.638a2 2 0 0 1-2.828 0l-7.425-7.425-7.778 7.778a2 2 0 1 1-2.828-2.828l7.778-7.778-7.425-7.425a2 2 0 1 1 2.828-2.828l7.425 7.425 7.071-7.071a2 2 0 1 1 2.828 2.828l-7.071 7.071 7.425 7.425a2 2 0 0 1 0 2.828z" fill="#D80027" /> </svg>'};
/**
 * Alerter displays toast-like messages to users. It is inspired by vanilla-toast (
 * https://github.com/mehmetemineker/vanilla-toast)
 * @param {AlertOptions} options
 */
class Alerter{constructor(options={position:AlertPosition.TopRight,duration:3e3,closable:!0,focusable:!0}){this.options=options,
/*
		 * If the outer container doesn't exist, make it
		 */
document.getElementsByClassName("alert-container").length||this._setup()}
/**
	 * success displays a success alert. Use this for positive messages.
	 * @param {string} message
	 * @param {function} callback
	 * @returns {void}
	 */success(message,callback){this.show(message,"success",callback)}
/**
	 * info displays an info alert. Use this for neutral messages.
	 * @param {string} message
	 * @param {function} callback
	 * @returns {void}
	 */info(message,callback){this.show(message,"info",callback)}
/**
	 * warn displays a warning alert. Use this to warn users of something.
	 * @param {string} message
	 * @param {function} callback
	 * @returns {void}
	 */warn(message,callback){this.show(message,"warn",callback)}
/**
	 * error displays an error alert. Use this to warn users of something bad.
	 * @param {string} message
	 * @param {function} callback
	 * @returns {void}
	 */error(message,callback){this.show(message,"error",callback)}
/**
	 * @param {string} message
	 * @param {string} type
	 * @param {function} callback
	 * @returns {void}
	 */show(message,type,callback){const e=document.getElementsByClassName(this.options.position)[0];message=Object.assign(document.createElement("div"),{className:"alert-card "+type,innerHTML:""+svgs[type],options:{...this.options,message:message,type:type,yPos:-1<this.options.position.indexOf("top")?"top":"bottom",inFocus:!1}});this._setContent(message),this._setIntroAnimation(message),this._bindEvents(message),this._autoDestroy(message,callback),e.appendChild(message)}_setContent(card){let e="";card.options.title&&(e+=`<h4>${card.options.title}</h4>`),e+=`<p>${card.options.message}</p>`;var t=Object.assign(document.createElement("div"),{className:"text-group",innerHTML:e});card.appendChild(t)}
/**
	 * @param {AlertCard} card
	 * @returns {void}
	 */_setIntroAnimation(card){card.style.setProperty("margin-"+card.options.yPos,"-15px"),card.style.setProperty("opacity","0"),setTimeout(()=>{card.style.setProperty("margin-"+card.options.yPos,"15px"),card.style.setProperty("opacity","1")},50)}
/**
	 * @param {AlertCard} card
	 * @returns {void}
	 */_bindEvents(card){card.addEventListener("click",()=>{card.options.closable&&this._destroy(card)}),card.addEventListener("mouseover",()=>{card.options.inFocus=card.options.focusable}),card.addEventListener("mouseout",()=>{card.options.inFocus=!1,this._autoDestroy(card)})}
/**
	 * @param {AlertCard} card
	 * @returns {void}
	 */_autoDestroy(card,callback){0!==card.options.duration&&setTimeout(()=>{card.options.inFocus||this._destroy(card,callback)},card.options.duration)}
/**
	 * @param {AlertCard} card
	 * @returns {void}
	 */_destroy(card,callback){card.style.setProperty("margin-"+card.options.yPos,`-${card.offsetHeight}px`),card.style.setProperty("opacity","0"),setTimeout(()=>{card.remove(),"function"==typeof callback&&callback()},500)}_setup(){const e=Object.assign(document.createElement("div"),{className:"alert-container"});for(const n of[0,1]){const a=Object.assign(document.createElement("div"),{className:"alert-row"});for(const r of[0,1,2]){var t=Object.assign(document.createElement("div"),{className:"alert-col "+alertPositionIndex[n][r]});a.appendChild(t)}e.appendChild(a)}document.body.appendChild(e)}}
/** @typedef {object & { closeOnClick: boolean, onShimClick: function }} ShimOptions */
/**
 * Shim displays a full screen shim to cover elements.
 * @param {ShimOptions} options
 */class Shim{constructor(closeOnClick=!1,onShimClick){this.closeOnClick=closeOnClick,this.onShimClick=onShimClick,this.shim=void 0}
/**
	 * show displays the shim
	 * @returns {void}
	 */show(){this.shim||document.getElementsByClassName("shim").length?document.getElementsByClassName("shim").length&&(this.shim=document.getElementsByClassName("shim")[0]):(this.shim=document.createElement("div"),this.shim.classList.add("shim"),this.closeOnClick&&this.shim.addEventListener("click",()=>{this.hide(this.onShimClick)}),document.body.appendChild(this.shim))}
/**
	 * hide removes the shim
	 * @returns {void}
	 */hide(callback){this._destroy(),"function"==typeof callback&&callback()}_destroy(){this.shim&&(this.shim.remove(),this.shim=void 0)}}
/** @typedef {object & { callback: Function }} ConfirmOptions */
/**
 * Confirmer displays a confirmation dialog. It has two mode: "yesno", "other".
 * "yesno" mode will display two buttons: Yes and No. "other" will only display a Close button.
 * The result of the click will be returned in a promise value.
 *
 * Styling is provided by confirm.css. It relies on variables:
 *   - --dialog-background-color
 *   - --border-color
 *
 * Example:
 *    const confirmer = new Confirmer();
 *    const result = await confirmer.yesNo("Are you sure?");
 */class Confirmer{constructor(){}
/**
	 * confirm displays a confirmation dialog. It shows a message and a Close button.
	 * @param {string} message
	 * @param {function} callback
	 * @returns {void}
	 */confirm(message,callback){this.show("confirm",message,callback)}
/**
	 * yesNo displays a confirmation dialog. It shows a message and Yes and No buttons.
	 * @param {string} message
	 * @returns {Promise<boolean>}
	 */yesNo(message){return new Promise(resolve=>{this.show("yesno",message,result=>resolve(result))})}
/**
	 * show displays a confirmation dialog. This is a raw function that is normally
	 * used by the yesNo and confirm functions.
	 * @param {string} type
	 * @param {string} message
	 * @param {function} callback
	 * @returns {void}
	 */show(type,message,callback){let e=new Shim(!0,()=>{this._close(t,callback,!1)});const t=Object.assign(document.createElement("dialog"),{className:"confirm-container",innerHTML:`<p>${message}</p>`});this._addButtons(t,type,e,callback),e.show(),document.body.appendChild(t)}_close(container,callback,callbackValue){container.remove(),"function"==typeof callback&&callback(callbackValue)}_addButtons(container,type,shim,callback){let t=[];if("yesno"===type){const a=Object.assign(document.createElement("button"),{innerText:"No",className:"cancel-button"}),r=(a.addEventListener("click",e=>{e.preventDefault(),e.stopPropagation(),shim.hide(!1),this._close(container,callback,!1)}),Object.assign(document.createElement("button"),{innerText:"Yes",className:"action-button"}));r.addEventListener("click",e=>{e.preventDefault(),e.stopPropagation(),shim.hide(!1),this._close(container,callback,!0)}),t.push(a,r)}else{const i=Object.assign(document.createElement("button"),{innerText:"Close",className:"action-button"});i.addEventListener("click",e=>{e.preventDefault(),e.stopPropagation(),shim.hide(!1),this._close(container,callback)}),t.push(i)}const n=Object.assign(document.createElement("div"),{className:"button-row"});n.append(...t),container.appendChild(n)}}const DateFormats={IsoWithTimezone:"yyyy-mm-ddthh:mm:ssz",IsoWithoutTimezone:"yyyy-mm-ddthh:mm:ss",InternationalWithSeconds:"yyyy-mm-dd hh:mm:ss",International:"yyyy-mm-dd hh:mm",UsDateTimeWithSeconds:"mm/dd/yyyy hh:mm:ss am/pm",UsDateTimeWithoutSeconds:"mm/dd/yyyy hh:mm am/pm",IsoDate:"yyyy-mm-dd",UsDate:"mm/dd/yyyy"},formatMap={"yyyy-mm-ddthh:mm:ssz":format1,"yyyy-mm-ddthh:mm:ss":format2,"yyyy-mm-dd hh:mm:ss":format3,"yyyy-mm-dd hh:mm":format4,"mm/dd/yyyy hh:mm:ss am/pm":format5,"mm/dd/yyyy hh:mm am/pm":format6,"yyyy-mm-dd":format7,"mm/dd/yyyy":format8};
/**
 * parseDateTime parses a date/time string into a Date object.
 * @param {string|number|Date} dt
 * @returns {Date}
 */
function parseDateTime(dt){return"number"==typeof dt?new Date(dt):dt instanceof Date?dt:"string"==typeof dt?parseDateString(dt):void 0}
/**
 * formatDateTime formats a Date object into a string using the specified format.
 * @param {string|number|Date} dt
 * @param {string} format
 * @returns {string}
 */function formatDateTime(dt,format){dt=parseDateTime(dt);let e=formatMap[format.toLowerCase()];if(e)return e(dt);throw new Error("Invalid date format: "+format)}
/**
 * @param {Date} dt
 * @returns {string}
 */function format1(dt){var{year:dt,month:e,day:t,hour:n,minute:a,second:r}=breakDownDate(dt);return`${zeroPad(dt)}-${zeroPad(e)}-${zeroPad(t)}T${zeroPad(n)}:${zeroPad(a)}:${zeroPad(r)}Z`}
/**
 * @param {Date} dt
 * @returns {string}
 */function format2(dt){var{year:dt,month:e,day:t,hour:n,minute:a,second:r}=breakDownDate(dt);return`${zeroPad(dt)}-${zeroPad(e)}-${zeroPad(t)}T${zeroPad(n)}:${zeroPad(a)}:`+zeroPad(r)}
/**
 * @param {Date} dt
 * @returns {string}
 */function format3(dt){var{year:dt,month:e,day:t,hour:n,minute:a,second:r}=breakDownDate(dt);return`${zeroPad(dt)}-${zeroPad(e)}-${zeroPad(t)} ${zeroPad(n)}:${zeroPad(a)}:`+zeroPad(r)}
/**
 * @param {Date} dt
 * @returns {string}
 */function format4(dt){var{year:dt,month:e,day:t,hour:n,minute:a}=breakDownDate(dt);return`${zeroPad(dt)}-${zeroPad(e)}-${zeroPad(t)} ${zeroPad(n)}:`+zeroPad(a)}
/**
 * @param {Date} dt
 * @returns {string}
 */function format5(dt){let{year:e,month:t,day:n,hour:a,minute:r,second:i}=breakDownDate(dt),o="AM";return 12<a&&(o="PM",a-=12),0===a&&(a=12),`${zeroPad(t)}/${zeroPad(n)}/${zeroPad(e)} ${zeroPad(a)}:${zeroPad(r)}:${zeroPad(i)} `+o}
/**
 * @param {Date} dt
 * @returns {string}
 */function format6(dt){let{year:e,month:t,day:n,hour:a,minute:r}=breakDownDate(dt),i="AM";return 12<a&&(i="PM",a-=12),0===a&&(a=12),`${zeroPad(t)}/${zeroPad(n)}/${zeroPad(e)} ${zeroPad(a)}:${zeroPad(r)} `+i}
/**
 * @param {Date} dt
 * @returns {string}
 */function format7(dt){var{year:dt,month:e,day:t}=breakDownDate(dt);return`${zeroPad(dt)}-${zeroPad(e)}-`+zeroPad(t)}
/**
 * @param {Date} dt
 * @returns {string}
 */function format8(dt){var{year:dt,month:e,day:t}=breakDownDate(dt);return`${zeroPad(e)}/${zeroPad(t)}/`+zeroPad(dt)}
/**
 * @param {Date} dt
 * @returns {object}
 */function breakDownDate(dt){return{year:dt.getFullYear(),month:dt.getMonth()+1,day:dt.getDate(),hour:dt.getHours(),minute:dt.getMinutes(),second:dt.getSeconds()}}
/**
 * @param {number} num
 * @returns {string}
 */function zeroPad(num){return num.toString().padStart(2,"0")}
/**
 * @param {string} dt
 * @returns {Date}
 */function parseDateString(dt){var t=[/(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})t(?<hour>\d{2}):(?<minute>\d{2}):(?<second>\d{2})z/i,/* YYYY-MM-DDTHH-mm-ssZ */
/(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})t(?<hour>\d{2}):(?<minute>\d{2}):(?<second>\d{2})/i,/* YYYY-MM-DDTHH-mm-ss */
/(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})\s+(?<hour>\d{2}):(?<minute>\d{2}):(?<second>\d{2})/i,/* YYYY-MM-DD HH-mm-ss */
/(?<month>\d{2})\/(?<day>\d{2})\/(?<year>\d{4})\s+(?<hour>\d{2}):(?<minute>\d{2}):(?<second>\d{2})\s*(?<meridian>am|pm)/i,/* MM/DD/YYYY HH:mm:ss am/pm */
/(?<month>\d{2})\/(?<day>\d{2})\/(?<year>\d{4})\s+(?<hour>\d{2}):(?<minute>\d{2})\s*(?<meridian>am|pm)/i,/* MM/DD/YYYY HH:mm am/pm */
/(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})/,/* YYYY-MM-DD */
/(?<month>\d{2})\/(?<day>\d{2})\/(?<year>\d{4})/];for(let e=0;e<t.length;e++){var n=dt.match(t[e]);if(n){var a=parseInt(n.groups.year)||(new Date).getFullYear(),r=parseInt(n.groups.month)||(new Date).getMonth(),i=parseInt(n.groups.day)||(new Date).getDate();let e=parseInt(n.groups.hour)||0;var o=parseInt(n.groups.minute)||0,s=parseInt(n.groups.second)||0;let t=n.groups.meridian||"";return""!==t&&"pm"===t.toLowerCase()&&e<12&&(e+=12),new Date(a,r-1,i,e,o,s)}}throw new Error("no pattern match for "+dt)}
/**
 * date-time-picker is a custom HTML element that allows the user to select a date and time.
 * It supports custom date formats.
 * @class DateTimePicker
 * @extends HTMLElement
 */class DateTimePicker extends HTMLElement{constructor(){super(),this._daysOfTheWeek=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],this._months=["January","February","March","April","May","June","July","August","September","October","November","December"],this.name=this.getAttribute("name")||"dateTime",
/* Get the date from attributes. If one isn't passed in, use now, but zero out the time. */
this.date=this.getAttribute("date")?parseDateTime(this.getAttribute("date")):"",this.dateFormat=this.getAttribute("date-format")||DateFormats.IsoWithTimezone,this.showTimeSelector=this.dateFormat===DateFormats.IsoWithTimezone||this.dateFormat===DateFormats.IsoWithoutTimezone||this.dateFormat===DateFormats.UsDateTimeWithSeconds||this.dateFormat===DateFormats.UsDateTimeWithoutSeconds||this.dateFormat===DateFormats.InternationalWithSeconds||this.dateFormat===DateFormats.International,this.twentyFourHourTime=this.dateFormat===DateFormats.IsoWithTimezone||this.dateFormat===DateFormats.IsoWithoutTimezone||this.dateFormat===DateFormats.InternationalWithSeconds||this.dateFormat===DateFormats.International,this.timeIncrement=this.getAttribute("time-increment")||"hour",// valid values are hour,30minute,15minute,10minute,5minute,1minute
this.today=new Date,this.inputEl=null,this.popupEl=null,this.headerEl=null,this.bodyEl=null,this.day=0,this.timeSelectorEl=null,this.selectedTimeIndex=0,this.yearBlockStart=this._getYear()-5}connectedCallback(){this.setAttribute("name",this.name+"-datepicker"),this.setAttribute("aria-label","Date Picker"),this.inputEl=this._createInputEl();var e=this._createInputLabel();""===this.date&&(this.date=new Date((new Date).getFullYear(),(new Date).getMonth(),(new Date).getDate(),0,0,0),this.yearBlockStart=this._getYear()-5),this.popupEl=this._createPopupEl(),this._drawHeaderEl(),this._drawCalendarBody(),this.insertAdjacentElement("beforeend",this.inputEl),this.insertAdjacentElement("beforeend",e),this.insertAdjacentElement("beforeend",this.popupEl),document.addEventListener("click",e=>{e.target.contains(this.popupEl)||e.target.contains(this.inputEl)||this.popupEl.contains(e.target)||this.hide()})}
/****************************************************
	 * PUBLIC METHODS
	 ****************************************************/
/**
	 * clear clears the date picker value.
	 * @returns {void}
	 */clear(){this.inputEl.value=""}
/**
	 * getDate returns the currently selected date.
	 * @returns {string|Date}
	 */getDate(){return this.date}
/**
	 * Moves the calendar forward or backward one month. A positive number moves forward, a negative number moves backward.
	 * @param {number} direction
	 */moveMonth(e,direction){e.preventDefault(),e.stopPropagation();let t=new Date(this.date);t.setMonth(t.getMonth()+direction),this.date=t,this.popupEl.querySelector("header button:nth-child(2)").innerText=this._getMonthName(),this.popupEl.querySelector("header button:nth-child(3)").innerText=this._getYear().toString(),this.popupEl.querySelector(".calendar-body").remove(),this._drawCalendarBody()}
/**
	 * setDate sets the date picker value.
	 * @param {Date} dt
	 * @returns {void}
	 */setDate(dt){this.date=dt,this.day=dt.getDate(),this._setInputDate()}
/**
	 * toggle shows or hides the calendar.
	 * @returns {void}
	 */toggle(){this.popupEl.classList.toggle("calendar-hidden"),this.inputEl.focus()}hide(){this.popupEl.classList.add("calendar-hidden")}
/****************************************************
	 * PRIVATE METHODS
	 ****************************************************/_drawHeaderEl(){var e=this._createPreviousMonthButton(),t=this._createNextMonthButton(),n=this._createCurrentMonthButton(),a=this._createCurrentYearButton();this.headerEl.innerHTML="",this.headerEl.insertAdjacentElement("beforeend",e),this.headerEl.insertAdjacentElement("beforeend",n),this.headerEl.insertAdjacentElement("beforeend",a),this.headerEl.insertAdjacentElement("beforeend",t)}_drawCalendarBody(){let t=document.createElement("div"),n=this._createCalendarBodyWeekDiv(),e=this._getFirstDayOfMonth();var a=e.getDay();let r=this._getLastDayOfMonth();var i,o=r.getDate();let s=!1;t.classList.add("calendar-body");for(let e=0;e<o+a;e++){
/*
			 * Basically we want to not render day numbers until we hit the
			 * first day of the month on the correct day of the week.
			 */
s||e===a&&(s=!0);var c=this._createCalendarBodyDayDiv(s,e,a);n.insertAdjacentElement("beforeend",c),
/*
			 * Create a new week div every 7 days.
			 */
(e+1)%7||(t.insertAdjacentElement("beforeend",n),n=this._createCalendarBodyWeekDiv())}""!==n.innerHTML&&t.insertAdjacentElement("beforeend",n),this.showTimeSelector&&(this._createTimeSelector(),t.insertAdjacentElement("beforeend",this.timeSelectorEl),i=this._createOkButton(),t.insertAdjacentElement("beforeend",i)),this._replaceBodyEl(t)}_drawMonthListBody(){const t=document.createElement("div");t.classList.add("month-list-body");for(let e=0;e<this._months.length;e++){var n=this._createMonthButton(e);t.insertAdjacentElement("beforeend",n)}this._replaceBodyEl(t)}_drawYearListBody(){const e=document.createElement("div"),t=(e.classList.add("year-list-body"),document.createElement("div"));t.classList.add("year-list");var n=this._createYearUpButton(),a=this._createYearDownButton();e.insertAdjacentElement("beforeend",n);for(let e=this.yearBlockStart;e<this.yearBlockStart+10;e++){var r=this._createYearButton(e);t.insertAdjacentElement("beforeend",r)}e.insertAdjacentElement("beforeend",t),e.insertAdjacentElement("beforeend",a),this._replaceBodyEl(e)}_getMonth(){return new Date(this.date).getMonth()}_getMonthName(){return this._months[this._getMonth()]}_getYear(){return new Date(this.date).getFullYear()}_getDay(){return new Date(this.date).getDate()}_getFirstDayOfMonth(){return new Date(this._getYear(),this._getMonth(),1)}_getLastDayOfMonth(){return new Date(this._getYear(),this._getMonth()+1,0)}_getHour(){return new Date(this.date).getHours()}_getMinute(){return new Date(this.date).getMinutes()}_getSecond(){return new Date(this.date).getSeconds()}
/**
	 * @param {number} day
	 */_onCalendarDayClick(e,day){e.preventDefault(),e.stopPropagation(),this.day=day,this._setInputDate(),this.showTimeSelector?this._createTimeSelectorOptions():(this.toggle(),this.inputEl.focus())}_onHeaderMonthClick(e){e.preventDefault(),e.stopPropagation(),this._drawMonthListBody()}
/**
	 * @returns {void}
	 */_onHeaderYearClick(e){e.preventDefault(),e.stopPropagation(),this._drawYearListBody()}
/**
	 * @param {number} monthIndex
	 */_onMonthClick(e,monthIndex){e.preventDefault(),e.stopPropagation(),this.date=new Date(this._getYear(),monthIndex,1),this._setInputDate(),this._drawHeaderEl(),this._drawCalendarBody()}
/**
	 * @param {Event & { target: HTMLSelectElement }} e
	 */_onTimeChange(e){var t=e.target.value;this.selectedTimeIndex=e.target.selectedIndex,this.date=t,this._setInputDate()}
/**
	 * @param {number} year
	 */_onYearClick(e,year){e.preventDefault(),e.stopPropagation(),this.date=new Date(year,this._getMonth(),1),this._setInputDate(),this._drawHeaderEl(),this._drawCalendarBody()}_onYearDownClick(e){e.preventDefault(),e.stopPropagation(),this.yearBlockStart+=10,this._drawYearListBody()}_onYearUpClick(e){e.preventDefault(),e.stopPropagation(),this.yearBlockStart-=10,this._drawYearListBody()}
/**
	 * @param {HTMLDivElement} newBody
	 */_replaceBodyEl(newBody){this.bodyEl.innerHTML="",this.bodyEl.insertAdjacentElement("beforeend",newBody)}_setInputDate(){var e=new Date(this._getYear(),this._getMonth(),this.day,this._getHour(),this._getMinute(),this._getSecond());this.inputEl.value=formatDateTime(e,this.dateFormat),this.dispatchEvent(new CustomEvent("change",{detail:{value:e}}))}
/**********************************************************************
	 * Methods to return invididual elements
	 *********************************************************************/
/**
	 * @param {boolean} started
	 * @param {number} dayIndex
	 * @param {number} firstDayOfWeek
	 * @returns {HTMLDivElement}
	 */_createCalendarBodyDayDiv(started,dayIndex,firstDayOfWeek){const n=Object.assign(document.createElement("div"),{className:"day"});if(started){let t=dayIndex-firstDayOfWeek+1;const a=Object.assign(document.createElement("button"),{innerText:""+t,type:"button"});a.addEventListener("click",e=>this._onCalendarDayClick.call(this,e,t)),new Date(this._getYear(),this._getMonth(),t)===this.today&&a.classList.add("today"),n.insertAdjacentElement("beforeend",a)}else n.classList.add("disabled");return n}_createCalendarBodyWeekDiv(){return Object.assign(document.createElement("div"),{className:"week"})}_createCurrentMonthButton(){const e=Object.assign(document.createElement("button"),{innerHTML:this._getMonthName(),type:"button"});return e.addEventListener("click",e=>this._onHeaderMonthClick.call(this,e)),e}_createCurrentYearButton(){const e=Object.assign(document.createElement("button"),{innerHTML:this._getYear().toString(),type:"button"});return e.addEventListener("click",e=>this._onHeaderYearClick.call(this,e)),e}_createInputEl(){const e=Object.assign(document.createElement("input"),{type:"text",name:this.name,"aria-describedby":this.name+"-format",value:this.date instanceof Date?formatDateTime(this.date,this.dateFormat):""});return e.addEventListener("click",()=>{""===this.date&&(this.date=new Date((new Date).getFullYear(),(new Date).getMonth(),(new Date).getDate(),0,0,0),this._drawHeaderEl(),this._drawCalendarBody()),this.toggle()}),e}_createInputLabel(){return Object.assign(document.createElement("p"),{innerText:`(${this.dateFormat})`,id:this.name+"-format"})}
/**
	 * @param {number} monthIndex
	 * @returns {HTMLAnchorElement}
	 */_createMonthButton(monthIndex){const t=Object.assign(document.createElement("button"),{innerText:this._months[monthIndex],type:"button"});return t.addEventListener("click",e=>this._onMonthClick.call(this,e,monthIndex)),t}_createNextMonthButton(){const e=Object.assign(document.createElement("button"),{innerHTML:'<i class="icon--mdi icon--mdi--arrow-right"></i>',type:"button"});return e.addEventListener("click",e=>this.moveMonth.call(this,e,1)),e}_createOkButton(){const e=Object.assign(document.createElement("button"),{innerText:"OK",type:"button",className:"ok"});return e.addEventListener("click",this.toggle.bind(this)),e}_createPopupEl(){this.headerEl=document.createElement("header"),this.bodyEl=document.createElement("section");const e=Object.assign(document.createElement("div"),{className:"date-time-picker-popup calendar-hidden",role:"dialog","aria-modal":"true","aria-label":"Choose Date"});return e.insertAdjacentElement("beforeend",this.headerEl),e.insertAdjacentElement("beforeend",this.bodyEl),e}_createPreviousMonthButton(){const e=Object.assign(document.createElement("button"),{innerHTML:'<i class="icon--mdi icon--mdi--arrow-left"></i>',type:"button"});return e.addEventListener("click",e=>this.moveMonth.call(this,e,-1)),e}_createTimeSelector(){this.timeSelectorEl=document.createElement("select"),this._createTimeSelectorOptions(),this.timeSelectorEl.addEventListener("change",this._onTimeChange.bind(this))}_createTimeSelectorOptions(){this.timeSelectorEl.innerHTML="";let t=1,a=("5minute"===this.timeIncrement&&(t=5),"10minute"===this.timeIncrement&&(t=10),"15minute"===this.timeIncrement&&(t=15),"30minute"===this.timeIncrement&&(t=30),"hour"===this.timeIncrement&&(t=60),new Date(this._getYear(),this._getMonth(),this._getDay(),0,0,0)),r=0;for(let e=0;e<1440;e+=t){let n=document.createElement("option");if(n.value=formatDateTime(a,this.dateFormat),r===this.selectedTimeIndex&&n.setAttribute("selected","selected"),this.twentyFourHourTime)n.innerText=a.getHours().toString().padStart(2,"0")+":"+a.getMinutes().toString().padStart(2,"0");else{let e=a.getHours(),t="AM";12<e&&(e-=12,t="PM"),12===e&&(t="PM"),0===e&&(e=12),n.innerText=`${e.toString().padStart(2,"0")}:${a.getMinutes().toString().padStart(2,"0")} `+t}this.timeSelectorEl.insertAdjacentElement("beforeend",n),a=new Date(a.getTime()+6e4*t),r++}}
/**
	 * @param {number} year
	 * @returns {HTMLAnchorElement}
	 */_createYearButton(year){const t=Object.assign(document.createElement("button"),{innerText:year.toString(),type:"button"});return t.addEventListener("click",e=>this._onYearClick.call(this,e,year)),t}_createYearDownButton(){const e=Object.assign(document.createElement("button"),{innerHTML:'<i class="icon--mdi icon--mdi--arrow-down"></i>',type:"button"});return e.addEventListener("click",e=>this._onYearDownClick.call(this,e)),e}_createYearUpButton(){const e=Object.assign(document.createElement("button"),{innerHTML:'<i class="icon--mdi icon--mdi--arrow-up"></i>',type:"button"});return e.addEventListener("click",e=>this._onYearUpClick.call(this,e)),e}}customElements.define("date-time-picker",DateTimePicker);
/**
 * PopupMenu is a Web Component that displays a popup menu. It attaches to a trigger element
 * that, when clicked, will show a list of menu items. It supports icons through the Feather
 * Icons library (https://feathericons.com/).
 *
 * Styling is provided by popup-menu.css. It relies on variables:
 *   - --dialog-background-color
 *   - --prmiary-color (for the hover).
 *   - --border-color
 *
 * Usage example:
 *    <popup-menu trigger="#trigger">
 *       <popup-menu-item id="item1" text="Menu Item 1" icon="log-out"></popup-menu-item>
 *    </popup-menu>
 *
 * @class PopupMenu
 * @extends HTMLElement
 */
class PopupMenu extends HTMLElement{constructor(){super(),this._trigger=null,this.isVisible=!1}connectedCallback(){if(this._trigger=this.getAttribute("trigger"),!this._trigger)throw new Error("You must provide a query selector for the element used to trigger this popup.");this.classList.add("popup-menu-hidden"),document.addEventListener("click",e=>{if(e.target!==this&&!this.contains(e.target)){const t=document.querySelector(this._trigger);e.target===t||t.contains(e.target)||this._hide()}}),document.querySelector(this._trigger).addEventListener("click",this.toggle.bind(this));const e=document.querySelectorAll("popup-menu-item");e.forEach(el=>{el.addEventListener("internal-menu-item-click",e=>{this._hide(),this.dispatchEvent(new CustomEvent("menu-item-click",{detail:{id:e.target.id,text:e.target.getAttribute("text"),data:e.target.getAttribute("data")}}))})})}disconnectedCallback(){let e=document.querySelector(this._trigger);e&&e.removeEventListener("click",this.toggle.bind(this))}
/**
	* Toggles the visibility of the popup menu
	* @param {Event} e The click event
	* @returns {void}
	*/toggle(e){e&&e.preventDefault(),this.isVisible?this._hide():this._show()}_hide(){this.isVisible=!1,this.classList.add("popup-menu-hidden")}_show(){var e=document.querySelector(this._trigger).getBoundingClientRect(),t=this.getBoundingClientRect();let n=e.left;n+t.width>window.innerWidth&&(n=e.left-(e.left+t.width-window.innerWidth)-3),this.style.left=n+"px",this.style.top=e.y+e.height+3+"px",this.isVisible=!0,this.classList.remove("popup-menu-hidden")}}
/**
 * Represents a popup menu item
 * @class PopupMenuItem
 * @extends HTMLElement
 */class PopupMenuItem extends HTMLElement{constructor(){super()}connectedCallback(){this._render()}_render(){var e=this.getAttribute("text"),t=this.getAttribute("icon");let n="";t&&(n+=`<i class="${t}"></i> `),n+=e;const a=Object.assign(document.createElement("a"),{href:"javascript:void(0)",classList:["popup-menu-item"],innerHTML:n});a.addEventListener("click",e=>{e.preventDefault(),e.stopPropagation(),this.dispatchEvent(new CustomEvent("internal-menu-item-click",{detail:e}))}),this.insertAdjacentElement("beforeend",a)}}
/**
 * Shows a popup menu
 * @param {string} el The query selector for the popup menu
 * @returns {void}
 */const showPopup=el=>{document.querySelector(el)._show()},hidePopup=el=>{document.querySelector(el)._hide()};
/**
 * Hides a popup menu
 * @param {string} el The query selector for the popup menu
 */customElements.get("popup-menu")||customElements.define("popup-menu",PopupMenu),customElements.get("popup-menu-item")||customElements.define("popup-menu-item",PopupMenuItem)
/**
 * Spinner is a simple library for displaying a loading spinner. It makes use
 * of the whole page to display the spinner. The spinner is pure CSS, SVG, and JavaScript.
 * Copyright Â© 2022 App Nerds LLC
 * @class Spinner
 */;class Spinner{constructor(){this.spinnerEl=null}hide(){this.spinnerEl&&(this.spinnerEl.remove(),this.spinnerEl=null)}show(){this.spinnerEl||(this.spinnerEl=document.createElement("div"),this.spinnerEl.classList.add("spinner"),this.spinnerEl.innerHTML=`<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
			 <circle cx="50" cy="50" r="45" />
		  </svg>
		`,document.body.appendChild(this.spinnerEl))}}
/**
 * A wrapper around fetch that will show a spinner
 * while the request is being made. This is useful for
 * long running requests.
 * @param {string} url The URL to fetch
 * @param {object} options The fetch options
 * @param {object} spinner The spinner element to show
 * @param {number} msBeforeShowSpinner The number of milliseconds to wait before showing the spinner. Default is 1000
 * @returns {Promise<object>} A promise that resolves to the fetch response
 */async function fetcher(url,options,spinner,msBeforeShowSpinner=1e3){let e,t;spinner&&(e=setTimeout(()=>{spinner.show()},msBeforeShowSpinner));try{t=await fetch(url,options)}finally{spinner&&(clearTimeout(e),spinner.hide())}return t}
/** @typedef { object & { http: fetcher, tokenGetterFunction: function, expiredTokenCallback: function, spinner: object, navigateTo: function } } GraphQLOptions */
/**
 * This class is a wrapper around the fetcher function
 * that makes it easy to execute GraphQL queries and mutations.
 * It also handles expired tokens.
 * @class GraphQL
 * @param {string} queryURL The URL to the GraphQL API
 * @param {GraphQLOptions} options Options for the GraphQL class
 */class GraphQL{constructor(queryURL,options={http:fetcher,tokenGetterFunction:null,expiredTokenCallback:null,spinner:null,navigateTo:null}){options={http:fetcher,tokenGetterFunction:null,expiredTokenCallback:null,spinner:null,navigateTo:null,...options},this.queryURL=queryURL,this.http=options.http,this.tokenGetterFunction=options.tokenGetterFunction,this.expiredTokenCallback=options.expiredTokenCallback,this.spinner=options.spinner,this.navigateTo=options.navigateTo}
/**
	 * Executes a query against a GraphQL API
	 * @param query string A graphql query. Omit the "query {}" portion.
	 * @returns {Promise<object>} A promise that resolves to the fetch response
	 */async query(query){if(!this.expiredTokenCallback||this.expiredTokenCallback(null,"/",this.navigateTo)){var n=this.tokenGetterFunction?this.tokenGetterFunction():"";query=`query {
			${query}
		}`;let e={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:query})},t=(n&&(e.headers.Authorization="Bearer "+n),await this.http(this.queryURL,e,this.spinner));if(400!==t.status&&401!==t.status){query=await t.json();if(t.ok)return query;throw new Error(query.message)}this.expiredTokenCallback&&this.expiredTokenCallback(t,"/",this.navigateTo)}}
/**
	 * Executes a mutation against a GraphQL API
	 * @param query string A graphql mutation. Omit the "mutation {}" portion
	 * @returns {Promise<object>} A promise that resolves to the fetch response
	 */async mutation(query){if(!this.expiredTokenCallback||this.expiredTokenCallback(null,"/",this.navigateTo)){var n=this.tokenGetterFunction?this.tokenGetterFunction():"";query=`mutation {
			${query}
		}`;let e={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:query})},t=(n&&(e.headers.Authorization="Bearer "+n),await this.http(this.queryURL,e,this.spinner));if(400!==t.status&&401!==t.status){query=await t.json();if(t.ok)return query;throw new Error(query.message)}this.expiredTokenCallback&&this.expiredTokenCallback(t,"/",this.navigateTo)}}}
/**
 * Debounces a function call. This is useful for things like
 * search boxes where you don't want to make a call to the
 * server for every keystroke.
 * Copyright Â© 2023 App Nerds LLC
 * @param {function} fn The function to debounce
 * @param {number} delay The delay in milliseconds. Default is 400
 * @returns {function} The debounced function
 */const debounce=(fn,delay=400)=>{let t=null;return function(){let e=arguments;clearTimeout(t),t=setTimeout(()=>{fn.apply(this,e)},delay)}},objectToMap=(o={})=>{let e=new Map;for(const t in o)e.set(t,o[t]);return e};
/**
 * Converts a classic JS object to a Map
 * Copyright Â© 2023 App Nerds LLC
 * @param o object The object to convert
 * @returns {Map} A Map
 */
/**
 * Callback used to validate the values entered into a Prompter
 * @callback ValidatorFunc
 * @param {Object} promptValues - The values entered into the prompter
 * @return {Object} { validationErrors: Array, isValid: boolean }
 */
/**
 * Prompter displays a modal dialog using the contents provided in the web component slots.
 * It allows you to put whatever elements you want into the dialog, and then retrieve the
 * contents of the dialog when the user clicks the confirm button.
 * @class Prompter
 * @extends {HTMLElement}
 */
class Prompter extends HTMLElement{constructor(){if(super(),this.attachShadow({mode:"open"}),this.windowEl=null,this.shim=new Shim(!1),this.width=this.getAttribute("width")||"",this.height=this.getAttribute("height")||"",this.actionButtonID=this.getAttribute("action-button")||"",this.cancelButtonID=this.getAttribute("cancel-button")||"",
/** @type {ValidatorFunc} */this.validatorFunc=null,!this.actionButtonID)throw new Error("Prompter requires an action button ID");if(!this.cancelButtonID)throw new Error("Prompter requires a cancel button ID");this.classList.add("hidden"),this.shadowRoot.innerHTML=`
			<div id="window" part="prompter" role="dialog" aria-modal="true" aria-label="Prompt" style="width: ${this.width}; height: ${this.height};">
				<slot name="title"></slot>
				<slot name="body"></slot>
				<nav part="buttons">
					<slot name="buttons"></slot>
				</nav>
			</div>
		`}connectedCallback(){this.querySelector(this.cancelButtonID).addEventListener("click",this._onCancelClick.bind(this)),this.querySelector(this.actionButtonID).addEventListener("click",this._onConfirmClick.bind(this))}hide(){this.classList.add("hidden"),this.shim.hide(),this._clearAllInputs()}show(){this.shim.show(),this.classList.remove("hidden"),this.querySelector('div[slot="body"]>input, div[slot="body"]>select, div[slot="body"]>textarea, div[slot="body"]>form>input,div[slot="body"]>form>select,div[slot="body"]>form>textarea').focus()}
/**
	 * Add a validation function to the prompter. This function will be called when
	 * the confirm button is clicked.
	 * @param {ValidatorFunc} f
	 * @returns {void}
	 */addValidatorFunc(f){this.validatorFunc=f}_onCancelClick(){this.hide(),this.dispatchEvent(new CustomEvent("cancel"))}_onConfirmClick(){let t={};if(this.querySelectorAll("input, select, textarea").forEach(el=>{let e="";el.hasAttribute("name")?e=el.getAttribute("name"):el.hasAttribute("id")&&(e=el.getAttribute("id")),t[e]=el.value}),this.validatorFunc){var{validationErrors:e,isValid:n}=this.validatorFunc(t);if(!n)return void this.dispatchEvent(new CustomEvent("validation-failed",{detail:{result:t,validationErrors:e}}))}this.hide(),this.dispatchEvent(new CustomEvent("confirm",{detail:t}))}_renderWindow(){this.windowEl=document.createElement("div"),this.windowEl.classList.add("prompter"),this.windowEl.setAttribute("role","dialog"),this.windowEl.setAttribute("aria-modal","true"),this.windowEl.setAttribute("aria-label","Prompt"),this.windowEl.style.width=this.width,this.windowEl.style.height=this.height,this.windowEl.innerHTML=`
			<slot name="title"></slot>
			<slot name="body"></slot>
		`}_clearAllInputs(){this.querySelectorAll("input, select, textarea").forEach(el=>{el.value=""})}}customElements.get("prompter-ui")||customElements.define("prompter-ui",Prompter);const ErrTokenExpired="token expired";
/**
 * SessionService is a service used to manage session data. It makes use
 * of the browser's sessionStorage object. This class provides
 * only static methods.
 * @class SessionService
 */class SessionService{
/**
	 * Clears the member from session storage.
	 * @static
	 * @memberof SessionService
	 * @returns {void}
	 */
static clearMember(){window.sessionStorage.removeItem("member")}
/**
	 * Clears the token from session storage.
	 * @static
	 * @memberof SessionService
	 * @returns {void}
	 */static clearToken(){window.sessionStorage.removeItem("token")}
/**
	 * Gets the member from session storage.
	 * @static
	 * @memberof SessionService
	 * @returns {object} The member object
	 */static getMember(){return JSON.parse(window.sessionStorage.getItem("member"))}
/**
	 * Gets the token from session storage.
	 * @static
	 * @memberof SessionService
	 * @returns {object} The token object
	 */static getToken(){return JSON.parse(window.sessionStorage.getItem("token"))}
/**
	 * Determines if the session has a member.
	 * @static
	 * @memberof SessionService
	 * @returns {boolean} True if the session has a member, otherwise false.
	 */static hasMember(){return null!==window.sessionStorage.getItem("member")}
/**
	 * Determines if the session has a token.
	 * @static
	 * @memberof SessionService
	 * @returns {boolean} True if the session has a token, otherwise false.
	 */static hasToken(){return null!==window.sessionStorage.getItem("token")}
/**
	 * Navigates to the specified path if the token has expired.
	 * This is determined by examing the error message. If the
	 * error message is "token expired", the user is navigated
	 * to the specified path.
	 * @static
	 * @param {object} e The error object
	 * @param {string} path The path to navigate to
	 * @param {function} navigateTo The function to use to navigate
	 * @memberof SessionService
	 */static navigateOnTokenExpired(e,path,navigateTo){e.message===ErrTokenExpired&&(SessionService.clearToken(),navigateTo(path))}
/**
	 * Sets the member in session storage.
	 * @static
	 * @param {object} member The member object
	 * @memberof SessionService
	 * @returns {void}
	 */static setMember(member){window.sessionStorage.setItem("member",JSON.stringify(member))}
/**
	 * Sets the token in session storage.
	 * @static
	 * @param {object} token The token object
	 * @memberof SessionService
	 * @returns {void}
	 */static setToken(token){window.sessionStorage.setItem("token",JSON.stringify(token))}
/**
	 * This is a function that can be used as a callback for the fetcher
	 * class. It will check the response for a 401 status code. If it
	 * finds one, it will clear the token and navigate to the specified
	 * path.
	 * @static
	 * @param {object} httpResponse The HTTP response object
	 * @param {string} path The path to navigate to
	 * @param {function} navigateTo The function to use to navigate
	 * @memberof SessionService
	 * @returns {boolean} True if the token is valid, otherwise false.
	 */static tokenExpireFunc(httpResponse,path,navigateTo){return httpResponse&&401===httpResponse.status?(SessionService.clearToken(),SessionService.navigateOnTokenExpired({message:ErrTokenExpired},path,navigateTo),!1):!!SessionService.hasToken()||(SessionService.navigateOnTokenExpired({message:ErrTokenExpired},path,navigateTo),!1)}}
/**
 * BaseView is the base class for all views in the application. It provides
 * a common set of functionality that all views can use. Your view JavaScript
 * components should extend this class and register themselves as custom elements.
 * @class BaseView
 * @extends {HTMLElement}
 * @property {string} title The title of the view. This is used to set the document title.
 * @property {object} params The parameters passed to the view.
 * @property {object} state The state of the view.
 */class BaseView extends HTMLElement{constructor(params,_onRenderComplete){super(),this._title="",this.params=params,this._state={},this._onRenderComplete=window._router.onRenderComplete||null,this.router=window._router}async connectedCallback(){await this.beforeRender(),await this.render(),this._setDocumentTitle(),await this.afterRender(),this._onRenderComplete&&this._onRenderComplete(this)}disconnectedCallback(){this.onUnload()}
/**
	 * This method is called before the view is rendered. Override this method
	 * to perform any actions before the view is rendered.
	 * @returns {Promise<void>}
	 */async beforeRender(){}
/**
	 * This method is called after the view is rendered. Override this method
	 * to perform any actions after the view is rendered.
	 * @returns {Promise<void>}
	 */async afterRender(){}
/**
	 * This method is called when the view is unloaded. Override this method
	 * to perform any actions when the view is unloaded.
	 * @returns {Promise<void>}
	 */async onUnload(){}
/**
	 * This method is called when the view is navigated to. Override this method
	 * render your page contents.
	 * @returns {Promise<void>}
	 */async render(){throw new Error("not implemented")}
/**
	 * Get the title for the current view.
	 * @returns {string}
	 */get title(){return this._title}
/**
	 * Get the HTML for the current view.
	 * @returns {string}
	 */get html(){return this._html}
/**
	 * Get the state for the current view.
	 * @returns {object}
	 */get state(){return this._state}
/**
	 * Set the state for the current view.
	 * @param {object} newState The new state for the view.
	 * @returns {void}
	 */set state(newState){this._state=newState}
/**
	 * Get the value of a query parameter.
	 * @param {string} paramName The name of the query parameter.
	 * @returns {string}
	 */getQueryParam(paramName){return this.router.getQueryParam(paramName)}
/**
	 * Navigate to a new URL.
	 * @param {string} url The URL to navigate to.
	 * @param {object} queryParams Query parameters to add to the URL.
	 * @param {object} state The state to pass to the new view.
	 * @returns {void}
	 */navigateTo(url,queryParams={},state={}){this.router.navigateTo(url,queryParams,state)}_setDocumentTitle(){var e=this.querySelectorAll("title");e&&0<e.length&&(this._title=e[0].innerText,document.title=this._title,this.removeChild(e[0]))}}
/**
 * DefaultPageNotFound is the default view to display when a page is not found.
 * @class DefaultPageNotFound
 * @extends {BaseView}
 */class DefaultPageNotFound extends BaseView{constructor(params){super(params)}async render(){return`
			<title>Page Not Found</title>
			<p>The page ${this.params.path} could not be found.</p>
		`}}customElements.get("default-page-not-found")||customElements.define("default-page-not-found",DefaultPageNotFound)
/** @typedef {object & { path: string, view: BaseView }} Route */
/**
 * Router is responsible for routing requests to the correct view.
 * @class Router
 */;class Router{
/**
	 * Creates a new instance of Router.
	 * @param {string} targetEl The element to render the SPA into.
	 * @param {Array<Route>} routes The routes to use for the SPA.
	 * @param {BaseView} pageNotFoundView The view to use when a route is not found.
	 */
constructor(targetEl,routes,pageNotFoundView=null){this.targetEl=targetEl,this.routes=routes,this.pageNotFoundView=pageNotFoundView,this.beforeRoute=null,this.afterRoute=null,this.injectParams=null,this.onRenderComplete=null,this.pageNotFoundView?this.routes.push({path:"/404notfound/:path",view:this.pageNotFoundView}):this.routes.push({path:"/404notfound/:path",view:DefaultPageNotFound})}
/**
	 * Retrieves a query parameter from the URL by name.
	 * @param {string} paramName The name of the query parameter to retrieve.
	 * @returns {string}
	 */getQueryParam(paramName){let e=new URLSearchParams(location.search);return e.get(paramName)}
/**
	 * Navigates to a URL.
	 * @param {string} url The URL to navigate to.
	 * @param {object} queryParams Query parameters to add to the URL.
	 * @param {object} state The state to pass to the new view.
	 * @returns {void}
	 */navigateTo(url,queryParams={},state={}){let t="";if(0<Object.keys(queryParams).length){var n,a,queryParams=objectToMap(queryParams);t+="?";for([n,a]of queryParams){var r=encodeURIComponent(n);let e=a;"object"==typeof a&&(e=JSON.stringify(a));var i=encodeURIComponent(e);t+=r+`=${i}&`}}history.pushState(state,null,""+url+t),this._route({state:state})}_pathToRegex(path){return new RegExp("^"+path.replace(/\//g,"\\/").replace(/:\w+/g,"(.+)")+"$")}_getParams(match){let e=0;var t=match.result.slice(1),n=Array.from(match.route.path.matchAll(/:(\w+)/g)).map(result=>result[1]);let a={};for(e=0;e<t.length;e++)a[n[e]]=t[e];if(this.injectParams){var r=this.injectParams(match);for(const i in r)a[i]=r[i]}return a}async _route(e){let t={};e.state&&(t=e.state);const n=this.routes.map(route=>({route:route,result:location.pathname.match(this._pathToRegex(route.path))}));let a=n.find(potentialMatch=>null!==potentialMatch.result);
/*
		 * Route not found - return first route
		 */if(a){if(!this.beforeRoute||!1!==this.beforeRoute.apply(this,a.route)){
/*
		 * Get parameters, then initialie the view and render.
		 */
e=this._getParams(a);const r=new a.route.view(e),i=(r.state=t,document.querySelector(this.targetEl));i.innerHTML="",i.appendChild(r),this.afterRoute&&this.afterRoute(a.route)}}else this.navigateTo("/404notfound"+location.pathname)}}
/** @typedef {import("./router.js").Route} Route */
/** @typedef {object & {routes: Array<Route>, targetElement: HTMLElement, router: Router, afterRoute: function, beforeRoute: function, injectParams: function, onRenderComplete: function, go: function }} Application */
/**
 * Creates a new single-page application.
 * @param {HTMLElement} targetElement The element to render the SPA into.
 * @param {Array<Route>} routes The routes to use for the SPA.
 * @param {BaseView} pageNotFoundView The view to use when a route is not found.
 * @returns {Application}
 */const application=(targetElement,routes,pageNotFoundView=DefaultPageNotFound)=>(window._router=new Router(targetElement,routes,pageNotFoundView),window.navigateTo=window._router.navigateTo.bind(window._router),window.addEventListener("popstate",e=>{window._router._route({state:e.state})}),{routes:routes,targetElement:targetElement,router:window._router,afterRoute:f=>{window._router.afterRoute=f.bind(window._router)},beforeRoute:f=>{window._router.beforeRoute=f.bind(window._router)},injectParams:f=>{window._router.injectParams=f.bind(window._router)},onRenderComplete:f=>{window._router.onRenderComplete=f.bind(window._router)},go:()=>{window._router._route({})}});class MemberService{spinnerEl;constructor(spinnerEl){this.spinnerEl=spinnerEl}async getCurrentMember(){let e=await fetcher("/api/member/current",{method:"GET",headers:{"Content-Type":"application/json"}},this.spinnerEl);return await e.json()}}
/*
 * MemberLoginBar is a component used to display a member dropdown in the header of websites. 
 * It displays either a user-uploaded image or the letter of the first initial of the user's name. 
 * When logged in the menu provides links to the user's account and log off. If the user is not logged 
 * in then a log in link is displayed.
 *
 * To work with member data this component requires service component that provides the following.
 *   - getCurrentMember - Must return an object with fields memberID, firstName, lastName, profilePictureURL
 *
 * This component uses Feather Icons. https://feathericons.com/
 * 
 * Copyright Â© 2022 App Nerds LLC
*/class MemberLoginBar extends HTMLElement{memberService;loginPath;constructor(){super(),this.loginPath=this.getAttribute("login-path")||"/member/login";var e=this.getAttribute("spinner")||null;let t=null;e&&(t=document.querySelector(e)),this.memberService=new MemberService(t)}static get observedAttributes(){return["login-path"]}set memberService(/** @type {any} */service){this.memberService=service}attributedChangedCallback(name,_,newValue){"login-path"===name&&(this.loginPath=newValue)}async connectedCallback(){var e=await this.memberService.getCurrentMember(),t=this.createContainerEl();this.createAvatarEl(t,e),this.createTextEl(t,e),this.createPopupMenu(t,e),this.insertAdjacentElement("beforeend",t),feather.replace()}
/*******************************************************************************
   * Event methods
   ******************************************************************************/
/*******************************************************************************
   * UI elements
   ******************************************************************************/createContainerEl(){return document.createElement("div")}createAvatarEl(container,member){let e;member&&member.avatarURL?((e=document.createElement("img")).classList.add("avatar"),e.setAttribute("role","img"),e.src=member.avatarURL):((e=document.createElement("div")).classList.add("avatar"),e.setAttribute("role","img"),e.innerHTML='<i data-feather="user"></i>'),container.insertAdjacentElement("beforeend",e)}createTextEl(container,member){let t;const n=document.createElement("a");if(n.id="member-link",member&&member.email){let e="";n.href="#",member.firstName&&(e+=member.firstName),member.lastName&&(e+=" "+member.lastName),""===e&&(e="User"),t=e+' <i data-feather="chevron-down"></i>'}else n.href=this.loginPath,t="Log In";n.innerHTML=t,container.insertAdjacentElement("beforeend",n)}createPopupMenu(container,member){if(member&&member.email){const t=document.createElement("popup-menu"),e=(t.setAttribute("trigger","#member-link"),[{id:"member-my-account-link",text:"My Account",icon:"home",handler:this.onMyAccountClick.bind(this)},{id:"member-log-out-link",text:"Log Out",icon:"log-out",handler:this.onLogOutClick.bind(this)}]);e.forEach(data=>{const e=document.createElement("popup-menu-item");e.setAttribute("id",data.id),e.setAttribute("text",data.text),e.setAttribute("icon",data.icon),e.addEventListener("click",data.handler),t.insertAdjacentElement("beforeend",e)}),container.insertAdjacentElement("beforeend",t)}}
/*******************************************************************************
   * Private methods
   ******************************************************************************/onMyAccountClick(){window.location="/member/profile"}onLogOutClick(){window.location="/api/member/logout"}}customElements.get("member-login-bar")||customElements.define("member-login-bar",MemberLoginBar)
/*
 * Copyright Â© 2022 App Nerds LLC
 */;class GoogleLoginForm extends HTMLElement{loginPath;createAccountPath;signInButtonURL;constructor(){super(),this.loginPath=this.getAttribute("login-path")||"/auth/google",this.createAccountPath=this.getAttribute("create-account-path")||"/create-account",this.signInButtonURL=this.getAttribute("sign-in-button-url")||"/static/images/sign-in-with-google.jpg"}connectedCallback(){const e=document.createElement("section"),t=(e.classList.add("google-login-form"),document.createElement("div"));t.classList.add("sign-up-footer"),e.innerHTML=`
      <a href="${this.loginPath}"><img src="${this.signInButtonURL}" alt="Sign in with Google" style="width:100%;" /></a>
    `,t.innerHTML=`
      <p>
        Don't have an account? Click <a href="${this.createAccountPath}">here</a> to create one.
      </p>
    `,e.insertAdjacentElement("beforeend",t),this.insertAdjacentElement("beforeend",e)}}customElements.get("google-login-form")||customElements.define("google-login-form",GoogleLoginForm)
/**
 * MessageBar is a component used to display a message on the screen.
 * @class MessageBar
 * @extends {HTMLElement}
 * @property {string} messageType The type of message to display. Valid values are "error", "warn", "info", and "success".
 * @property {string} message The message to display.
 */;class MessageBar extends HTMLElement{constructor(){super(),this.messageType=this.getAttribute("message-type")||"info",this.message=this.getAttribute("message")||"",this.containerEl=null}connectedCallback(){this.containerEl=this._createContainerEl();var e=this._createCloseButtonEl(),t=this._createTextEl();this.containerEl.insertAdjacentElement("beforeend",e),this.containerEl.insertAdjacentElement("beforeend",t),this.insertAdjacentElement("beforeend",this.containerEl)}_createContainerEl(){const e=document.createElement("div");switch(e.classList.add("message-bar"),this.messageType){case"error":e.classList.add("message-bar-error");break;case"warn":e.classList.add("message-bar-warn");break;case"info":e.classList.add("message-bar-info");break;case"success":e.classList.add("message-bar-success")}return e}_createCloseButtonEl(){const e=document.createElement("span");return e.innerHTML="&times;",e.addEventListener("click",()=>{this.containerEl&&this.containerEl.remove()}),e}_createTextEl(){const e=document.createElement("p");return e.setAttribute("role","alert"),e.innerHTML=this.message,e}}customElements.get("message-bar")||customElements.define("message-bar",MessageBar)
/**
 * ColorPicker is a component used to display a color picker on the screen.
 * If the color the user wants is not there, they can type a hex code into the box to get
 * the color they want.
 * @class ColorPicker
 * @extends {HTMLElement}
 * @property {string} color The currently selected color.
 * @property {string} colors A comma-separated list of colors to display in the grid. These must be valid hex codes.
 * @property {string} name The name of the input field.
 */;class ColorPicker extends HTMLElement{constructor(){super(),this._color=this.getAttribute("color")||"",this._colors=this.getAttribute("colors")||"#ffffff,#858585,#000000,#fc1303,#8f0b01,#fc5e03,#943701,#fcc600,#8f7000,#37fc00,#1e8701,#03fcdf,#018778,#05c5fa,#017291,#0349fc,#002582,#7e00fc,#47018c,#fc03f4,#8a0085,#fa009a,#8a0055",this._name=this.getAttribute("name")||"color";var e=this._colors.split(",");const t=this._createOuterContainer();e=this._createColorGrid(e,this._color);this.input=this._createInput(this._name,this._color),t.insertAdjacentElement("beforeend",e),t.insertAdjacentElement("beforeend",this.input),this.appendChild(t)}_createOuterContainer(){return Object.assign(document.createElement("div"),{className:"color-picker"})}_createColorGrid(colors,selectedColor){const e=Object.assign(document.createElement("div"),{className:"grid"});return colors.forEach(color=>{color=this._createColorItem(color,selectedColor);e.insertAdjacentElement("beforeend",color)}),e}_createColorItem(color,selectedColor){const e=Object.assign(document.createElement("div"),{className:"grid-item",style:"background-color: "+color});return e.setAttribute("data-color",color),selectedColor===color&&e.classList.add("grid-item-selected"),e.addEventListener("click",this._onColorItemClicked.bind(this)),e}_createInput(name,color){return Object.assign(document.createElement("input"),{type:"text",name:name,"aria-label":"Selected color hexidecimal value",autocomplete:"on",className:"color-input",value:color})}_onColorItemClicked(e){this._clearGridSelectedClasses();var t=e.target.getAttribute("data-color");e.target.classList.add("grid-item-selected"),this.input.value=t,this.dispatchEvent(new CustomEvent("color-selected",{detail:t}))}_clearGridSelectedClasses(){const t=document.querySelectorAll(".grid-item");for(let e=0;e<t.length;e++)t[e].classList.remove("grid-item-selected")}}customElements.get("color-picker")||customElements.define("color-picker",ColorPicker);export{AlertPosition,Alerter,BaseView,ColorPicker,Confirmer,DateFormats,DateTimePicker,ErrTokenExpired,GoogleLoginForm,GraphQL,MemberLoginBar,MemberService,MessageBar,PopupMenu,PopupMenuItem,Prompter,SessionService,Shim,Spinner,application,debounce,fetcher,formatDateTime,hidePopup,objectToMap,parseDateTime,showPopup};